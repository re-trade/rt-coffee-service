spring:
  application:
    name: Main Service
  grpc:
    server:
      enabled: true
      port: ${GRPC_PORT:9080}
  data:
    redis:
      port: ${REDIS_PORT:6379}
      host: ${REDIS_HOST:localhost}
    elasticsearch:
      repositories:
        enabled: on
  datasource:
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:12345}
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME}
  sql:
    init:
      mode: always
      schema-locations: classpath:schema.sql
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        default_schema: main
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 1000
          max-attempts: 3
          max-interval: 10000
          multiplier: 2.0
        acknowledge-mode: manual
    address-shuffle-mode: inorder
  elasticsearch:
    uris: ${ELASTICSEARCH_URL:http://localhost:9200}
    username: ${ELASTICSEARCH_USERNAME:}
    password: ${ELASTICSEARCH_PASSWORD:}
server:
  port: ${PORT:8080}
  servlet:
    context-path: ${CONTEXT_PATH:/api/v1}
security:
  token:
      jwt:
        access-token:
          key: ${JWT_ACCESS_KEY}
          max-age: ${JWT_ACCESS_EX:3000}
        refresh-token:
          key: ${JWT_REFRESH_KEY}
          max-age: ${JWT_REFRESH_EX:8000}
        twofa-token:
          key: ${JWT_2FA_KEY}
          max-age: ${JWT_2FA_EX:3000}
  host:
    origin-allows: ${ORIGIN_ALLOWS:}
    base-host: ${BASE_HOST:}
    front-end: ${FRONTEND_URL}
    swagger-context-path: ${SWAGGER_CONTEXT_PATH:/api/v1}
  forgot-password:
    timeout: ${FORGOT_PASSWORD_TIMEOUT:10}
    callbackUrl: ${FORGOT_PASSWORD_CALLBACK:http://localhost:3000/forgot-password}

  aes:
    key: ${AES_KEY:sus}

management:
  endpoints:
    web:
      exposure:
        include: health,info

springdoc:
  api-docs:
    enabled: true
    path: /api-docs
  swagger-ui:
    enabled: true
    try-it-out-enabled: true
    operations-sorter: method
    tags-sorter: alpha
    filter: true
    path: /swagger-ui


oauth2:
  google:
    clientId: ${GOOGLE_CLIENT_ID}
    clientSecret: ${GOOGLE_CLIENT_SECRET}
    scopes:
      - email
      - profile
    redirectUrl: ${GOOGLE_REDIRECT_URL}
    userProfileEndpoint: ${GOOGLE_USERPROFILE_ENDPOINT}

grpc:
  client:
    voucher-service:
      host: ${VOUCHER_SERVICE_GRPC_HOST:localhost}
      port: ${VOUCHER_SERVICE_GRPC_PORT:9081}

cart:
  ttl-days: 30
  max-items-per-cart: 100
  max-quantity-per-item: 99
  key-prefix: "cart:user:"

logging:
  level:
    org.springframework.amqp: DEBUG
    org.springframework.messaging: DEBUG
    org.springframework.retry: DEBUG

payment:
  payos:
    client-id: ${PAYOS_CLIENT_ID:}
    api-key: ${PAYOS_API_KEY:}
    checksum-key: ${PAYOS_CHECKSUM_KEY:}
  vnp:
    pay-url: ${VNP_PAYURL:https://sandbox.vnpayment.vn/paymentv2/vpcpay.html}
    tmn-code: ${VNP_TMN_CODE:}
    hash-secret: ${VNP_HASH_SECRET:}
    api-url: ${VNP_API_URL:https://sandbox.vnpayment.vn/merchant_webapi/api/transaction}
  callback: ${PAYMENT_CALLBACK:http://localhost:3000/checkout}


minio:
  url: ${MINIO_URL:http://localhost:9000}
  access-key: ${MINIO_ACCESS_KEY:}
  secret-key: ${MINIO_SECRET_KEY:}
  bucket-name: ${MINIO_BUCKET_NAME:retrade}